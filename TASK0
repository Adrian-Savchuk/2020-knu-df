{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "ilWBQP4l1Tv9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import time"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x2cgnLaK1Xz5",
        "colab_type": "code",
        "outputId": "4783900d-0af8-4b29-b4b4-200eb586f774",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "transform = transforms.Compose(\n",
        "    [transforms.ToTensor(),\n",
        "     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
        "\n",
        "trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n",
        "                                        download=True, transform=transform)\n",
        "trainloader = torch.utils.data.DataLoader(trainset, batch_size=256,\n",
        "                                          shuffle=True, num_workers=2)\n",
        "\n",
        "testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n",
        "                                       download=True, transform=transform)\n",
        "testloader = torch.utils.data.DataLoader(testset, batch_size=256,\n",
        "                                         shuffle=False, num_workers=2)\n",
        "\n",
        "classes = ('plane', 'car', 'bird', 'cat',\n",
        "           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "  0%|          | 0/170498071 [00:00<?, ?it/s]"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "170500096it [00:02, 59697484.01it/s]                               \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Extracting ./data/cifar-10-python.tar.gz to ./data\n",
            "Files already downloaded and verified\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OXPysehT1X2s",
        "colab_type": "code",
        "outputId": "50eaf6c9-b785-4091-8112-824f4702dd2d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# functions to show an image\n",
        "\n",
        "\n",
        "def imshow(img):\n",
        "    img = img / 2 + 0.5     # unnormalize\n",
        "    npimg = img.numpy()\n",
        "    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n",
        "\n",
        "\n",
        "# get some random training images\n",
        "dataiter = iter(trainloader)\n",
        "images, labels = dataiter.next()\n",
        "\n",
        "# show images\n",
        "imshow(torchvision.utils.make_grid(images))\n",
        "# print labels\n",
        "print(' '.join('%5s' % classes[labels[j]] for j in range(4)))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " bird  bird plane horse\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nJwAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nl5ydzwE1X5T",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "\n",
        "class Better_net(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Better_net, self).__init__()\n",
        "        self.conv1 = nn.Conv2d(3, 64, 3, padding = 1)\n",
        "        self.bnm1 = nn.BatchNorm2d(64)\n",
        "        self.conv2 = nn.Conv2d(64, 64, 3, padding = 1)\n",
        "        self.bnm2 = nn.BatchNorm2d(64)\n",
        "        self.conv3 = nn.Conv2d(64, 64, 3, padding = 1)\n",
        "        self.bnm3 = nn.BatchNorm2d(64)\n",
        "\n",
        "        self.conv4 = nn.Conv2d(64, 128, 3, padding = 1)\n",
        "        self.bnm4 = nn.BatchNorm2d(128)\n",
        "        self.conv5 = nn.Conv2d(128, 128, 3, padding = 1)\n",
        "        self.bnm5 = nn.BatchNorm2d(128)\n",
        "        self.conv6 = nn.Conv2d(128, 128, 3, padding = 1)\n",
        "        self.bnm6 = nn.BatchNorm2d(128)\n",
        "        \n",
        "        self.conv7 = nn.Conv2d(128, 256, 3, padding = 1)\n",
        "        self.bnm7 = nn.BatchNorm2d(256)\n",
        "        self.conv8 = nn.Conv2d(256, 256, 3, padding = 1)\n",
        "        self.bnm8 = nn.BatchNorm2d(256)\n",
        "        self.conv9 = nn.Conv2d(256, 256, 3, padding = 1)\n",
        "        self.bnm9 = nn.BatchNorm2d(256)\n",
        "\n",
        "        self.conv10 = nn.Conv2d(256, 256, 3, padding = 1)\n",
        "        self.bnm10 = nn.BatchNorm2d(256)\n",
        "        self.conv11 = nn.Conv2d(256, 256, 3, padding = 1)\n",
        "        self.bnm11 = nn.BatchNorm2d(256)\n",
        "        self.conv12 = nn.Conv2d(256, 256, 3, padding = 1)\n",
        "        self.bnm12 = nn.BatchNorm2d(256)\n",
        "       \n",
        "        self.conv13 = nn.Conv2d(256, 512, 3, padding = 1)\n",
        "        self.bnm13 = nn.BatchNorm2d(512)\n",
        "        self.conv14 = nn.Conv2d(512, 512, 3, padding = 1)\n",
        "        self.bnm14 = nn.BatchNorm2d(512)\n",
        "        self.conv15 = nn.Conv2d(512, 512, 3, padding = 1)\n",
        "        self.bnm15 = nn.BatchNorm2d(512)\n",
        "       \n",
        "        self.conv16 = nn.Conv2d(512, 1028, 3, padding = 1)\n",
        "        self.bnm16 = nn.BatchNorm2d(1028)\n",
        "        self.conv17 = nn.Conv2d(1028, 1028, 3, padding = 1)\n",
        "        self.bnm17 = nn.BatchNorm2d(1028)\n",
        "        self.conv18 = nn.Conv2d(1028, 1028, 3, padding = 1)\n",
        "        self.bnm18 = nn.BatchNorm2d(1028)\n",
        "        \n",
        "        self.fc1 = nn.Linear(1 * 1 * 1028, 1500)\n",
        "        self.fc2 = nn.Linear(1500, 300)\n",
        "        self.fc3 = nn.Linear(300, 150)\n",
        "        self.fc4 = nn.Linear(150, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "\n",
        "        x = F.relu(self.conv1(x))\n",
        "        x = self.bnm1(x)\n",
        "        x = F.relu(self.conv2(x))\n",
        "        x = self.bnm2(x)\n",
        "        x = F.relu(self.conv3(x))\n",
        "        x = self.bnm3(x)\n",
        "        x = F.max_pool2d(x, 2, 2)\n",
        "\n",
        "        x = F.relu(self.conv4(x))\n",
        "        x = self.bnm4(x)\n",
        "        x = F.relu(self.conv5(x))\n",
        "        x = self.bnm5(x)\n",
        "        x = F.relu(self.conv6(x))\n",
        "        x = self.bnm6(x)\n",
        "        x = F.max_pool2d(x, 2, 2)\n",
        "\n",
        "        x = F.relu(self.conv7(x))\n",
        "        x = self.bnm7(x)\n",
        "        x = F.relu(self.conv8(x))\n",
        "        x = self.bnm8(x)\n",
        "        x = F.relu(self.conv9(x))\n",
        "        x = self.bnm9(x)\n",
        "\n",
        "        x = F.relu(self.conv10(x))\n",
        "        x = self.bnm10(x)\n",
        "        x = F.relu(self.conv11(x))\n",
        "        x = self.bnm11(x)\n",
        "        x = F.relu(self.conv12(x))\n",
        "        x = self.bnm12(x)\n",
        "        x = F.max_pool2d(x, 2, 2)\n",
        "\n",
        "        x = F.relu(self.conv13(x))\n",
        "        x = self.bnm13(x)\n",
        "        x = F.relu(self.conv14(x))\n",
        "        x = self.bnm14(x)\n",
        "        x = F.relu(self.conv15(x))\n",
        "        x = self.bnm15(x)\n",
        "        x = F.max_pool2d(x, 2, 2)\n",
        "\n",
        "        x = F.relu(self.conv16(x))\n",
        "        x = self.bnm16(x)\n",
        "        x = F.relu(self.conv17(x))\n",
        "        x = self.bnm17(x)\n",
        "        x = F.relu(self.conv18(x))\n",
        "        x = self.bnm18(x)\n",
        "        x = F.max_pool2d(x, 2, 2)\n",
        "\n",
        "\n",
        "        x = x.view(-1, 1 * 1 * 1028)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = F.relu(self.fc2(x))\n",
        "        x = F.relu(self.fc3(x))\n",
        "        x = self.fc4(x)\n",
        "        return F.log_softmax(x, dim=1)\n",
        "\n",
        "\n",
        "net = Better_net().to(device)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iQ7KayUl1X9r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch.optim as optim\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.SGD(net.parameters(), lr=0.001 , momentum=0.9)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ACr-9xgG1YCy",
        "colab_type": "code",
        "outputId": "f1cfe365-eb4f-47a1-c725-4b66afb8c54e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        }
      },
      "source": [
        "for epoch in range(100):  # loop over the dataset multiple times\n",
        "\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(trainloader, 0):\n",
        "        # get the inputs\n",
        "        inputs, labels = data\n",
        "        inputs, labels = inputs.cuda(), labels.cuda()\n",
        "\n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        #print('Loss: ', running_loss)\n",
        "        if i % 64000 == 63999:    # print every 2000 mini-batches\n",
        "            print('[Epoch: %d, Batches: %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 2000))\n",
        "            running_loss = 0.0\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    with torch.no_grad():\n",
        "      for data in testloader:\n",
        "        images, labels = data\n",
        "        images, labels = images.cuda(), labels.cuda()\n",
        "        outputs = net(images)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "    print('Epoch: ', epoch + 1)\n",
        "    print('Accuracy of the network: {}%'.format(\n",
        "      100 * correct / total))\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch:  1\n",
            "Accuracy of the network: 86.57%\n",
            "Epoch:  2\n",
            "Accuracy of the network: 86.58%\n",
            "Epoch:  3\n",
            "Accuracy of the network: 86.57%\n",
            "Epoch:  4\n",
            "Accuracy of the network: 86.57%\n",
            "Epoch:  5\n",
            "Accuracy of the network: 86.59%\n",
            "Epoch:  6\n",
            "Accuracy of the network: 86.58%\n",
            "Epoch:  7\n",
            "Accuracy of the network: 86.59%\n",
            "Epoch:  8\n",
            "Accuracy of the network: 86.59%\n",
            "Epoch:  9\n",
            "Accuracy of the network: 86.6%\n",
            "Epoch:  10\n",
            "Accuracy of the network: 86.57%\n",
            "Epoch:  11\n",
            "Accuracy of the network: 86.58%\n",
            "Epoch:  12\n",
            "Accuracy of the network: 86.58%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XGzPNDb91YH8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dataiter = iter(testloader)\n",
        "images, labels = dataiter.next()\n",
        "\n",
        "# print images\n",
        "imshow(torchvision.utils.make_grid(images))\n",
        "print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iaOExuHW1YMq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "outputs = net(images)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XaoSsBFK1YKz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "_, predicted = torch.max(outputs, 1)\n",
        "\n",
        "print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]\n",
        "                              for j in range(4)))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AVvMg77R1YGa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "correct = 0\n",
        "total = 0\n",
        "with torch.no_grad():\n",
        "    for data in testloader:\n",
        "        images, labels = data\n",
        "        outputs = net(images)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "print('Accuracy of the network on the 10000 test images: %d %%' % (\n",
        "    100 * correct / total))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "51b5Zvsy1YAo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class_correct = list(0. for i in range(10))\n",
        "class_total = list(0. for i in range(10))\n",
        "with torch.no_grad():\n",
        "    for data in testloader:\n",
        "        images, labels = data\n",
        "        outputs = net(images)\n",
        "        _, predicted = torch.max(outputs, 1)\n",
        "        c = (predicted == labels).squeeze()\n",
        "        for i in range(4):\n",
        "            label = labels[i]\n",
        "            class_correct[label] += c[i].item()\n",
        "            class_total[label] += 1\n",
        "\n",
        "\n",
        "for i in range(10):\n",
        "    print('Accuracy of %5s : %2d %%' % (\n",
        "        classes[i], 100 * class_correct[i] / class_total[i]))"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}